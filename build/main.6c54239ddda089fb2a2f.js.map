{"version":3,"sources":["webpack:///./js/task-3.js","webpack:///./index.js","webpack:///./js/task-1.js","webpack:///./js/task-2.js"],"names":["makeTransaction","transaction","delay","min","max","Math","floor","random","Promise","resolve","reject","setTimeout","id","logSuccess","message","console","log","logError","warn","amount","then","catch","ms","logger","time","users","name","active","toggleUserState","allUsers","userName","updatedUsers","map","user","table"],"mappings":"4EASC,MAIMA,EAAmBC,IACtB,MAAMC,GAL0BC,EAKQ,IALHC,EAKQ,IAJvCC,KAAKC,MAAMD,KAAKE,UAAYH,EAAMD,EAAM,GAAKA,IADpB,IAACA,EAAKC,EAOrC,OAAO,IAAII,QAAQ,CAACC,EAASC,KACzBC,WAAW,KACYN,KAAKE,SAAW,IAG/BE,EAAS,eAAcR,EAAYW,mBAAmBV,OAE1DQ,EAAQ,gCAA+BT,EAAYW,kCAExDV,IAGAW,EAAaC,IACjBC,QAAQC,IAAIF,IAGRG,EAAWH,IACfC,QAAQG,KAAKJ,IAafd,EAAgB,CAAEY,GAAI,GAAIO,OAAQ,MAC/BC,KAAKP,GACLQ,MAAMJ,GAETjB,EAAgB,CAAEY,GAAI,GAAIO,OAAQ,MAC/BC,KAAKP,GACLQ,MAAMJ,GAETjB,EAAgB,CAAEY,GAAI,GAAIO,OAAQ,KAC/BC,KAAKP,GACLQ,MAAMJ,GAETjB,EAAgB,CAAEY,GAAI,GAAIO,OAAQ,MAC/BC,KAAKP,GACLQ,MAAMJ,I,kCC5DV,sC,mBCMA,MAAMf,EAAQoB,GACH,IAAId,QAAQC,IACfE,WAAW,KACPF,EAAS,GAAEa,IACZA,KAILC,EAASC,GAAQT,QAAQC,IAAK,kBAAiBQ,OAGrDtB,EAAM,KAAMkB,KAAKG,GACjBrB,EAAM,KAAMkB,KAAKG,GACjBrB,EAAM,MAAMkB,KAAKG,I,mBCZhB,MAAME,EAAQ,CACZ,CAAEC,KAAM,QAASC,QAAQ,GACzB,CAAED,KAAM,OAAQC,QAAQ,GACxB,CAAED,KAAM,OAAQC,QAAQ,GACxB,CAAED,KAAM,MAAOC,QAAQ,IAanBC,EAAkB,CAACC,EAAUC,KACjC,MAAMC,EAAeF,EAASG,IAAIC,GAChCA,EAAKP,OAASI,EAAW,IAAKG,EAAMN,QAASM,EAAKN,QAAWM,GAG/D,OAAOzB,QAAQC,QAAQsB,IAGnBR,EAASQ,GAAgBhB,QAAQmB,MAAMH,GAW7CH,EAAgBH,EAAO,SAASL,KAAKG,GACrCK,EAAgBH,EAAO,OAAOL,KAAKG,K","file":"main.6c54239ddda089fb2a2f.js","sourcesContent":["// ## Задание 3\n\n//import { reject, resolve } from \"core-js/fn/promise\";\n\n// Перепиши функцию `makeTransaction()` так, чтобы она не использовала\n// callback-функции `onSuccess` и `onError`, а принимала всего один параметр\n// `transaction` и возвращала промис.\n\n// ```js\n const randomIntegerFromInterval = (min, max) => {\n   return Math.floor(Math.random() * (max - min + 1) + min);\n };\n\n const makeTransaction = (transaction) => {\n    const delay = randomIntegerFromInterval(200, 500);\n\n    return new Promise((resolve, reject) => {\n        setTimeout(() => {\n            const canProcess = Math.random() > 0.3;\n\n            if (canProcess) {\n                resolve(`Transaction ${transaction.id} processed in ${delay}ms`);\n            };\n            reject(`Error processing transaction ${transaction.id}. Please try again later.`);\n        });\n    }, delay);\n};\n\n const logSuccess = message => {\n   console.log(message);\n };\n\n const logError = message => {\n   console.warn(message);\n };\n\n// /*\n//  * Работает так\n//  */\n// makeTransaction({ id: 70, amount: 150 }, logSuccess, logError);\n// makeTransaction({ id: 71, amount: 230 }, logSuccess, logError);\n// makeTransaction({ id: 72, amount: 75 }, logSuccess, logError);\n// makeTransaction({ id: 73, amount: 100 }, logSuccess, logError);\n// /*\n//  * Должно работать так\n//  */\n makeTransaction({ id: 70, amount: 150 })\n   .then(logSuccess)\n   .catch(logError);\n\n makeTransaction({ id: 71, amount: 230 })\n   .then(logSuccess)\n   .catch(logError);\n\n makeTransaction({ id: 72, amount: 75 })\n   .then(logSuccess)\n   .catch(logError);\n\n makeTransaction({ id: 73, amount: 100 })\n   .then(logSuccess)\n   .catch(logError);\n \n","import './js/task-1';\nimport './js/task-2';\nimport './js/task-3';","//## Задание 1\n\n//Напиши функцию `delay(ms)`, которая возвращает промис, переходящий в состояние\n//`\"resolved\"` через `ms` миллисекунд. Значением исполнившегося промиса должно\n//быть то кол-во миллисекунд которое передали во время вызова функции `delay`.\n\nconst delay = ms => {\n    return new Promise(resolve => {\n        setTimeout(() => {\n            resolve(`${ms}`);\n        }, ms)\n    })\n};\n\nconst logger = time => console.log(`Resolved after ${time}ms`);\n\n// Вызовы функции для проверки\ndelay(2000).then(logger); // Resolved after 2000ms\ndelay(1000).then(logger); // Resolved after 1000ms\ndelay(1500).then(logger); // Resolved after 1500ms","// ## Задание 2\n\n// Перепиши функцию `toggleUserState()` так, чтобы она не использовала\n// callback-функцию `callback`, а принимала всего два параметра `allUsers` и\n// `userName` и возвращала промис.\n\n// ```js\n const users = [\n   { name: 'Mango', active: true },\n   { name: 'Poly', active: false },\n   { name: 'Ajax', active: true },\n   { name: 'Lux', active: false },\n ];\n\n// const toggleUserState = (allUsers, userName, callback) => {\n//   const updatedUsers = allUsers.map(user =>\n//     user.name === userName ? { ...user, active: !user.active } : user,\n//   );\n\n//   callback(updatedUsers);\n// };\n\n// const logger = updatedUsers => console.table(updatedUsers);\n\n const toggleUserState = (allUsers, userName) => {\n   const updatedUsers = allUsers.map(user =>\n     user.name === userName ? { ...user, active: !user.active } : user,\n   );\n\n   return Promise.resolve(updatedUsers);\n };\n\n const logger = updatedUsers => console.table(updatedUsers);\n\n// /*\n//  * Сейчас работает так\n//  */\n// toggleUserState(users, 'Mango', logger);\n// toggleUserState(users, 'Lux', logger);\n\n// /*\n//  * Должно работать так\n//  */\n toggleUserState(users, 'Mango').then(logger);\n toggleUserState(users, 'Lux').then(logger);\n// ```"],"sourceRoot":""}